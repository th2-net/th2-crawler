plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id 'com.palantir.docker' version '0.25.0'
    id 'application'
    id 'org.jetbrains.kotlin.kapt' version "$kotlin_version"
}

group 'com.exactpro.th2'
version release_version

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

ext {
    cradleVersion = '2.21.0'
    grpcCrawlerVersion = '0.3.1-update-rpt-grpc-SNAPSHOT'
    sharedDir = file("${project.rootDir}/shared")
}

dependencies {
    // BOM with external dependencies restrictions
    api platform('com.exactpro.th2:bom:3.1.0-TH2-3093-1766515619-SNAPSHOT')

    api "com.exactpro.th2:cradle-core:${cradleVersion}"

    implementation "com.exactpro.th2:cradle-cassandra:${cradleVersion}"

    // the library for interaction with infra API
    implementation 'com.exactpro.th2:common:3.33.1-dev-1801872848-SNAPSHOT'

    implementation "com.exactpro.th2:grpc-crawler-data-processor:${grpcCrawlerVersion}"
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310") {
        because('we need to process java Instant class')
    }
    implementation('com.fasterxml.jackson.module:jackson-module-kotlin') {
        because('we need to be able crate a mapper for state deserialization')
    }

    // Logging. All versions are specified in BOM dependency
    implementation "org.slf4j:slf4j-log4j12"
    implementation "org.slf4j:slf4j-api"

    // Idiomatic logging for Kotlin. Wraps slf4j
    implementation 'io.github.microutils:kotlin-logging:2.0.4'

    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation("org.jetbrains.kotlin:kotlin-reflect") {
        because('the old kotlin version in classpath')
    }

    implementation('io.prometheus:simpleclient') {
        because('metrics to export')
    }

    implementation('io.grpc:grpc-core') {
        because('default max message size constant')
    }

    compileOnly 'com.google.auto.service:auto-service-annotations:1.0'
    kapt 'com.google.auto.service:auto-service:1.0'
    annotationProcessor 'com.google.auto.service:auto-service:1.0'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.6.0'

    // https://mvnrepository.com/artifact/org.mockito/mockito-core
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.11.2'
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

jar {
    manifest {
        attributes(
                'Created-By':               "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title':      '',
                'Specification-Vendor':     'Exactpro Systems LLC',
                'Implementation-Title':     project.archivesBaseName,
                'Implementation-Vendor':    'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version':   project.version
        )
    }
}

application {
    mainClass.set('com.exactpro.th2.crawler.main.Main')
}

applicationName = 'service'

distTar {
    archiveFileName.set("${applicationName}.tar")
}

dockerPrepare {
    dependsOn distTar
}

docker {
    copySpec.from(tarTree("$buildDir/distributions/${applicationName}.tar"))
}